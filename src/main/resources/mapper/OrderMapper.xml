<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.y4j.final_project.service.orderservice.OrderMapper">
  
  	<select id="getOrderTotal" resultType="Integer">
  		select count(*) as total from admin_order where 1=1
  		<if test='searchName !=null and searchName != ""'>
  			and admin_order_prod_name like concat('%','${searchName}','%')
  		</if>
		<if test='searchContent!=null and searchContent eq "album"'>
  			<![CDATA[and admin_order_album_no !=0]]>
  		</if>
  		<if test='searchContent!=null and searchContent eq "product"'>
  			<![CDATA[and admin_order_prod_no !=0]]>
  		</if>
  		<if test='searchContent!=null and searchContent eq "all"'>
  			<![CDATA[and admin_order_no >=1]]>
  		</if>
  	</select>
  
  
  
  
  	<select id="getOrderList" resultType="Admin_orderVO">
  		SELECT * FROM admin_order where 1=1
  		<if test='searchName !=null and searchName != ""'>
  			and admin_order_prod_name like concat('%','${searchName}','%')
  		</if>
  		<if test='searchContent!=null and searchContent eq "album"'>
  			<![CDATA[and admin_order_album_no!=0]]>
  		</if>
  		<if test='searchContent!=null and searchContent eq "product"'>
  			<![CDATA[and admin_order_prod_no!=0]]>
  		</if>
  		<if test='searchContent!=null and searchContent eq "all"'>
  			<![CDATA[and admin_order_no >=1]]>
  		</if>
  			order by 
  		<if test='searchStock !=null and searchStock eq "asc"'>
  			cast(admin_order_prod_cnt as decimal(10,0)) asc,
  		</if>
  		<if test='searchStock !=null and searchStock eq "desc"'>
  			cast(admin_order_prod_cnt as decimal(10,0)) desc,
  		</if>
  		<if test='searchStock !=null and searchStock eq "new"'>
  			admin_order_regdate desc,
  		</if>
  		 admin_order_no desc limit #{pageStart}, #{amount}
  	</select>
  	
  	
  	
  	
  	
  	
  	<select id="getProductList" resultType="ProductVO">
  		select * from product order by prod_no desc
  	</select>
  	
  	<update id="productModify" parameterType="ProductVO">
  		update product set prod_price=#{prod_price}, prod_discount_rate=#{prod_discount_rate},prod_img_path=#{prod_img_path}, prod_info_img_path=#{prod_info_img_path} where prod_no=#{prod_no}
  	</update>
  	
  	<select id="getAlbumList" resultType="AlbumVO">
  		select * from album order by album_no desc
  	</select>
  	
  	<update id="albumModify" parameterType="AlbumVO">
  		update album set album_price=#{album_price}, album_discount_rate=#{album_discount_rate}, album_img_path=#{album_img_path} where album_no=#{album_no}
  	</update>
  	
  	
  	<insert id="additionalRegist" parameterType="Admin_orderVO">
  		insert into admin_order(admin_order_id,
  								admin_order_category,
  								admin_order_prod_no,
  								admin_order_album_no,
  								admin_order_prod_cnt,
  								admin_order_sizetype,
  								admin_order_regdate,
  								admin_order_price,
  								admin_order_company,
  								admin_order_prod_name)
  		values(#{admin_order_id},
  				#{admin_order_category},
  				#{admin_order_prod_no},
  				#{admin_order_album_no},
  				#{admin_order_prod_cnt},
  				#{admin_order_sizetype},
  				#{admin_order_regdate},
  				#{admin_order_price},
  				#{admin_order_company},
  				#{admin_order_prod_name})
  	</insert>
  	
  	<update id="updateAlbumStock" parameterType="Admin_orderVO">
  		update album set album_stock=album_stock+#{admin_order_prod_cnt} where album_no=#{admin_order_album_no}
  	</update>
  	
  	<update id="updateProdStock" parameterType="Admin_orderVO">
  		update product set prod_stock=prod_stock+#{admin_order_prod_cnt} where prod_no=#{admin_order_prod_no}
  	</update>
  	
  	
  	
  	
  	<select id="getDetail" resultType="Admin_orderVO" parameterType="string">
  		select * from admin_order where admin_order_no=#{admin_order_no}
  	</select>
  	
  	<select id="getAlbum" resultType="AlbumVO">
  		select * from album where album_no=#{admin_order_album_no}
  	</select>
  	
  	<select id="getAlbumDetail" resultType="AlbumVO" parameterType="Integer">
  		select * from album where album_no=#{album_no}
  	</select>
  	
  	<select id="getProduct" resultType="ProductVO">
  		select * from product where prod_no=#{admin_order_prod_no}
  	</select>
  	
  	<select id="getProductDetail" resultType="ProductVO" parameterType="Integer">
  		select * from product where prod_no=#{prod_no}
  	</select>
  	
  	<insert id="albumRegist" parameterType="AlbumVO">
  		insert into album(album_artist
  							,album_title
  							,album_category
  							,album_price
  							,album_release_date
  							,album_discount_rate
  							,album_stock
  							,album_version
  							,album_img_path)
  		values(#{album_artist}
  				,#{album_title}
  				,#{album_category}
  				,#{album_price}
  				,#{album_release_date}
  				,#{album_discount_rate}
  				,#{album_stock}
  				,#{album_version}
  				,#{album_img_path})
  	</insert>
  	
  	<insert id="productRegist" parameterType="ProductVO">
  		insert into product(prod_type
  							,prod_name
  							,prod_category
  							,prod_sizetype
  							,prod_artist
  							,prod_price
  							,prod_discount_rate
  							,prod_stock
  							,prod_img_path
  							,prod_info_img_path
  							,prod_regdate)
  		values(#{prod_type}
  				,#{prod_name}
  				,#{prod_category}
  				,#{prod_sizetype}
  				,#{prod_artist}
  				,#{prod_price}
  				,#{prod_discount_rate}
  				,#{prod_stock}
  				,#{prod_img_path}
  				,#{prod_info_img_path}
  				,#{prod_regdate})
  	</insert>
  	
	
	<insert id="adminAlbumRegist" parameterType="Admin_orderVO">
		<selectKey resultType="Integer" keyProperty="admin_order_album_no" order="BEFORE">
			select max(album_no) as admin_order_album_no from album where album_category=#{admin_order_category}
		</selectKey>
  			insert into admin_order(admin_order_album_no
  									,admin_order_id
  									,admin_order_price
  									,admin_order_category
  									,admin_order_prod_cnt
  									,admin_order_regdate
  									,admin_order_sizetype
  									,admin_order_company
  									,admin_order_prod_name)
  				values(#{admin_order_album_no}
  						,#{admin_order_id}
  						,#{admin_order_price}
  						,#{admin_order_category}
  						,#{admin_order_prod_cnt}
  						,#{admin_order_regdate}
  						,#{admin_order_sizetype}
  						,#{admin_order_company}
  						,#{admin_order_prod_name})
  	</insert>
  	
  	<insert id="adminProductmRegist" parameterType="Admin_orderVO">
  		<selectKey resultType="Integer" keyProperty="admin_order_prod_no" order="BEFORE">
			select max(prod_no) as admin_order_prod_no from product where prod_category=#{admin_order_category}
		</selectKey>
		insert into admin_order(admin_order_prod_no
  										,admin_order_id
  										,admin_order_price
  										,admin_order_category
  										,admin_order_prod_cnt
  										,admin_order_regdate
  										,admin_order_sizetype
  										,admin_order_company
  										,admin_order_prod_name)
  		values(#{admin_order_prod_no}
  				,#{admin_order_id}
  				,#{admin_order_price}
  				,#{admin_order_category}
  				,#{admin_order_prod_cnt}
  				,#{admin_order_regdate}
  				,#{admin_order_sizetype}
  				,#{admin_order_company}
  				,#{admin_order_prod_name})
  	</insert>
  	
  	
  	
  	<select id="getCategory" resultType="CategoryVO">
  		select * from category where category_lv=1 order by category_group_id
  	</select>
  	
  	<select id="getMidCategory" resultType="CategoryVO">
  		select * from category where category_lv=2 order by category_group_id
  	</select>
  	
  	<select id="getSmallCategory" resultType="String">
  		select category_detail_nm from category where category_group_id=#{category_group_id} and category_detail_parent_lv=#{category_detail_lv} and category_lv=3
  	</select>
  	
  	
  	
  	<select id="getCategoryChild" resultType="CategoryVO">
  		select * from category 
  		where category_group_id=#{category_group_id}
  		and category_parent_lv=#{category_lv}
  		and category_detail_parent_lv=#{category_detail_lv}
  	</select>
  	
  	<insert id="bigCategoryReg" parameterType="CategoryVO">
  		insert into category(category_group_id
  							,category_lv
  							,category_nm
  							,category_detail_lv
  							,category_detail_nm
  							,category_parent_lv
  							,category_detail_parent_lv)
  		values(#{category_group_id}
  				,#{category_lv}
  				,#{category_nm}
  				,#{category_detail_lv}
  				,#{category_detail_nm}
  				,#{category_parent_lv}
  				,#{category_detail_parent_lv})
  	</insert>
  	
  	<insert id="midSmallCategoryReg" parameterType="CategoryVO">
  		<selectKey resultType="Integer" keyProperty="category_detail_lv" order="BEFORE">
  			select IFNULL(max(category_detail_lv),0)+1
  			from category where category_group_id=#{category_group_id} and category_lv=#{category_lv}
  		</selectKey>
  		
  		insert into category(category_group_id
  							,category_lv
  							,category_nm
  							,category_detail_lv
  							,category_detail_nm
  							,category_parent_lv
  							,category_detail_parent_lv)
  		values(#{category_group_id}
  				,#{category_lv}
  				,#{category_nm}
  				,#{category_detail_lv}
  				,#{category_detail_nm}
  				,#{category_parent_lv}
  				,#{category_detail_parent_lv})
  	</insert>
  	
  	<select id="getTopProduct" resultType="ProductVO">
  		select prod_artist, prod_name, prod_sales_volume from product order by prod_sales_volume desc limit 0,10
  	</select>
  	
  	<select id="getTopAlbum" resultType="AlbumVO">
  		select album_artist, album_title, album_sales_volume from album order by album_sales_volume desc limit 0,10
  	</select>
  	
	<!-- order_history -->
  	<select id="getOrderHistoryList" resultType="OrderHistoryVO">
  		select * from order_history order by order_no desc limit #{pageStart}, #{amount}
  	</select>
  	
  	<select id="getOrderHistoryTotal" resultType="Integer">
  		select count(*) as total from order_history
  	</select>
  	
  	<update id="updateOrderHistoryState" parameterType="OrderHistoryVO">
  		update order_history set order_state=#{order_state} where order_no=#{order_no};
  	</update>
  	
 <!--  	<insert id="dummyhistory">
  		insert into order_history(order_addressee
  								,order_addressee_contact
  								,order_date
  								,order_payment_method
  								,order_prod_cnt
  								,order_prod_name
  								,order_prod_no
  								,prod_no
  								,order_shipping_address
  								,order_shipping_message
  								,order_state
  								,order_total_price
  								,order_zipcode
  								,user_id)
  			values(#{order_addressee}
  								,#{order_addressee_contact}
  								,#{order_date}
  								,#{order_payment_method}
  								,#{order_prod_cnt}
  								,#{order_prod_name}
  								,#{order_prod_no}
  								,#{prod_no}
  								,#{order_shipping_address}
  								,#{order_shipping_message}
  								,#{order_state}
  								,#{order_total_price}
  								,#{order_zipcode}
  								,#{user_id})
  	</insert> -->
  	
  </mapper>
  